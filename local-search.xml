<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/08/19/test-1/"/>
    <url>/2024/08/19/test-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><p>By：思源南路世一劈</p><h2 id="6月29日"><a href="#6月29日" class="headerlink" title="6月29日"></a>6月29日</h2><p>CS61B，启动！</p><p>虽然之前在学校简单把Week 1的内容看完了并且把proj0写完了，但是现在已经基本忘记了，所以现在开始重新开始我的数据结构学习之旅！</p><h3 id="Java-简介"><a href="#Java-简介" class="headerlink" title="Java 简介"></a>Java 简介</h3><p>Java是<strong>面向对象编程</strong>的语言，在CS61B中将担任我们主要使用的语言</p><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上为Java中Hello world程序的代码，由该代码块我们可以理解Java程序的基本结构：</p><ul><li>Java程序文件均由一个个类构成，体现其<strong>面向对象编程</strong>的特点</li><li>类名与文件名相同</li><li>main函数为类的主函数，其中<code>String args[]</code>表示main函数的参数(记住就行)</li><li><code>System.out.println()</code>是Java的输出函数，类比C++中的<code>cout</code>和<code>printf</code></li></ul><h4 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h4><p>执行 Java 程序最常见的方法是通过两个程序的序列运行它。第一个是 Java 编译器，或 <code>javac</code> 。第二个是 Java 解释器，或 <code>java</code>  </p><p><img src="https://joshhug.gitbooks.io/hug61b/content/assets/compilation_figure.svg" alt="compilationflow"></p><p>例如，要运行 <code>HelloWorld.java</code> ，我们会在终端中输入命令 <code>javac HelloWorld.java</code> ，然后输入命令 <code>java HelloWorld</code> 。结果会类似于这样：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>$ <span class="hljs-keyword">java </span>HelloWorld<br>Hello World! <br></code></pre></td></tr></table></figure><h4 id="其他基本语法"><a href="#其他基本语法" class="headerlink" title="其他基本语法"></a>其他基本语法</h4><p>循环，条件等语法同C++相同，不再赘述，即<code>for</code>循环，<code>while</code>循环和，<code>if-else</code>条件语句</p><h3 id="Java中类和函数"><a href="#Java中类和函数" class="headerlink" title="Java中类和函数"></a>Java中类和函数</h3><h4 id="Java中的函数"><a href="#Java中的函数" class="headerlink" title="Java中的函数"></a>Java中的函数</h4><p>由于所有的 Java 代码都是类的一部分，我们必须定义函数，使其属于某个类。属于类的函数通常被称为“方法”。</p><ul><li>返回类型可类比C++：<code>void</code>,<code>int</code>,<code>double</code>等</li><li><code>public</code>前缀表示这个函数是该类的公共方法，相对应的是 <code>private</code></li></ul><p>一个基础Demo如下，效果为返回较大的数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LargerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">larger</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(larger(<span class="hljs-number">8</span>, <span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Java中的类"><a href="#Java中的类" class="headerlink" title="Java中的类"></a>Java中的类</h4><p>总体来说，Java中类的基本语法同C++中大体相似，例如使用 <strong>.</strong> 来调用类的函数以及变量，又例如<code>this</code>指针等，这里列出比较重要的几点：</p><ul><li><code>new</code>关键字：用来实例化类变量，注意，虽然Java中没有严格意义上的指针，但<code>new</code>的逻辑事实上也可以类比C++中的类的指针申请新的动态变量，例如如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weightInPounds;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span> &#123;<br>        weightInPounds = w;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">20</span>);<br>        Dog B;<br>        B = A;<br>        B.weightpounds = <span class="hljs-number">30</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码执行后，A与B事实上是同一条狗，它们的体重都是30</p><ul><li><code>static</code>关键字：</li></ul><p>Java 允许我们定义两种类型的方法：</p><ol><li>类方法，又称静态方法</li><li>实例方法，又称非静态方法</li></ol><p>实例方法是只能由类的特定实例执行的操作。静态方法是由类本身执行的操作。在不同情况下，两者都很有用。作为静态方法的一个示例， <code>Math</code> 类提供了一个 <code>sqrt</code> 方法。因为它是静态的，我们可以按照以下方式调用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x = Math.sqrt(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>如果 <code>sqrt</code> 是一个实例方法，我们将会有下面这种尴尬的语法。幸运的是 <code>sqrt</code> 是一个静态方法，所以我们在真实的程序中不必这样做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Math</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Math</span>();<br>x = m.sqrt(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>有时候，拥有一个同时包含实例方法和静态方法的类是有意义的。例如，假设想要比较两只狗的能力。做到这一点的一种方法是添加一个用于比较狗的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">maxDog</span><span class="hljs-params">(Dog d1, Dog d2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;<br>        <span class="hljs-keyword">return</span> d1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d2;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法可以被调用，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">15</span>);<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">100</span>);<br>Dog.maxDog(d, d2);<br></code></pre></td></tr></table></figure><p>观察到我们已经使用类名调用，因为这个方法是一个静态方法</p><p>同理，使用<code>static</code>关键字定义的变量即为静态变量，可由类名直接调用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/19/hello-world/"/>
    <url>/2024/08/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
